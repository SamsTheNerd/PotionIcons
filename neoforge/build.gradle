plugins {
    id 'com.github.johnrengelman.shadow' version "7.1.2"
    id "me.modmuss50.mod-publish-plugin" version "0.5.1"
}

archivesBaseName = "${archivesBaseName}-neoforge"

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')

    modApi "com.samsthenerd.inline:inline-neoforge:${project.inline_version}"
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}


publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = archivesBaseName
            from components.java
        }
    }

    repositories {
        maven {
            url System.getenv("local_maven_url")
        }
    }
}


publishMods {
    file = remapJar.archiveFile
    additionalFiles.from(sourcesJar.archiveFile)
    changelog = trimChangelog(file("$rootDir/changelog.md").text)
    type = STABLE
    modLoaders.add("neoforge")

    version = project.version + "-neoforge"
    displayName = "Potion Icons" + " " + project.version + " [NeoForge]"

    curseforge {
        accessToken = System.getenv("CURSEFORGE_API_KEY")
        projectId = project.potionicons_curseforge_id
        minecraftVersions.add(project.minecraft_version)

        requires{
            slug = "cloth-config"
        }
    }

    modrinth {
        accessToken = System.getenv("MODRINTH_API_KEY")
        projectId = project.potionicons_modrinth_slug
        minecraftVersions.add(project.minecraft_version)

        requires{
            slug = "cloth-config"
        }
    }
}
plugins {
    id 'com.github.johnrengelman.shadow' version "7.1.2"
    id "me.modmuss50.mod-publish-plugin" version "0.5.1"
}

archivesBaseName = "${archivesBaseName}-fabric"

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    modApi "com.samsthenerd.inline:inline-fabric:${project.inline_version}"

    modCompileOnly ("com.terraformersmc:modmenu:${mod_menu_version}"){
        transitive(false)
    }
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}


publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = archivesBaseName
            from components.java
        }
    }

    repositories {
        maven {
            url System.getenv("local_maven_url")
        }
    }
}

publishMods {
    file = remapJar.archiveFile
    additionalFiles.from(sourcesJar.archiveFile)
    changelog = trimChangelog(file("$rootDir/changelog.md").text)
    type = STABLE
    modLoaders.add("fabric")
    modLoaders.add("quilt")

    version = project.version + "-fabric"
    displayName = "Potion Icons" + " " + project.version + " [Fabric]"

    curseforge {
        accessToken = System.getenv("CURSEFORGE_API_KEY")
        projectId = project.potionicons_curseforge_id
        minecraftVersions.add(project.minecraft_version)
        requires{
            slug = "fabric-api"
        }
        requires{
            slug = "cloth-config"
        }
    }

    modrinth {
        accessToken = System.getenv("MODRINTH_API_KEY")
        projectId = project.potionicons_modrinth_slug
        minecraftVersions.add(project.minecraft_version)

        requires{
            slug = "fabric-api"
        }
        requires{
            slug = "cloth-config"
        }
    }

    github {
        accessToken = System.getenv("GITHUB_TOKEN") ?: ""
        repository = System.getenv("GITHUB_REPOSITORY") ?: ""
        commitish = System.getenv("GIT_COMMIT") ?: ""
        tagName = "release/${project.version}"
    }
}

tasks {
    publishGithub {
        dependsOn(
                project(":common").tasks.remapJar,
                project(":neoforge").tasks.remapJar,
        )

        // we need to do this here so that it waits until Forge is already configured
        // otherwise tasks.remapJar doesn't exist yet
        publishMods {
            github {
                additionalFiles.from(
                        project(":common").tasks.remapJar.archiveFile,
                        project(":neoforge").tasks.remapJar.archiveFile,
                )
            }
        }
    }
}